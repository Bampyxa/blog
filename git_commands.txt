git init  - созд. git-репозиторий из выбранного каталога
git add file - добав. файла в индексацию
  git add . - добав. в индекс всех файлов и подкаталогов текущ-го каталога(.)
git commit - созд-е коммита, откроется редак. по-умолч. для внес-я комментар.
  git commit -m "commit 1" - созд-е коммита(с комментарием)
git status - проверка статуса репоз-я
git log - список произвед. изм-й(коммитов)
  git log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short  - улучшен. список: --pretty=""-формат вывода, %h-укороч. хэш, %d-допол-я комм(головы веток), %ad-дата коммита, %s-коммент-й, %an-имя автора, --graph-дерево коммитов, --date=short-//, --all - все, включая послед.
  [alias] - сокр-я комманд:
    For Windows:
      git config --global alias.co checkout
    For Unix:
      .gitconfig - файл, в котор. мож. добав. алиасы:
      [alias]
        co = checkout
git checkout <hash>/<tag>- переход на нуж-й коммит
  (git checkout master- на послед. в выбр-й ветке; git checkout Tag1^1; git checkout Tag1~1 - переход на предыд-й коммит)
git tag <title> - создан. тега коммита
  git tag - просмотр списка всех тегов
Отмена изм-й:
  1)файл не проиндексир. : git checkout <file> - перекл-е на версию файла в репозит.
  2)файл проиндексир. : git reset HEAD <file> - сброс буфер-й зоны, а после git checkout <file>
  3)файл проиндексир. и сделан коммит : git revert HEAD --no-edit - делаем коммит,котор. удал. нежелат-е изм-я, сделан. друг. коммитом(котор. пока виден в истории git log)
  4)то же, но с очист. истории комм-в : git reset --hard <tag>/<hash> - сброс до нужного коммита(но к ошиб-му комм. мож.добрать. через тег или хеш)
  5)git tag -d <tag> - запуск сборщ. мусора, удал-й ненуж. коммиты
git commit --amend -m "" - изменить предыдущий коммит(нов. не созд-ся)
Перемещ-е файла в катал.:
  git mv <file> <cat> - 1)с изм-ем в git(индекс-ся)
  mv <file> <cat> - 2)если исп-ем для перемещ-я не коман. git, то после
    git add <cat>/<file>
    git rm <file>
git branch <имяветки> - создание ветки
  git branch - список веток
  git checkout -b <имяветки> -сразу созд-е ветки и переход на неё
git log/hist --all - графич. показать все ветки(по-умолч. показ. текущ.)
git merge master - слить ветку master с текущей, при этом возмож. конфлик., если измен-я в ветках противореч. др.другу.(нуж. буд. указать в файле какое изм-е остан-ся, а какое удал-ся.)
git rebase master - перебазир-е - слияние веток со слиян. историй коммитов.
  Не исп-те перебазир-е:
    1)Если ветка является публич. и расшарен. Перепис-е общих веток будет мешать работе других членов команды.
    2)Когда важна точная история коммитов ветки (т. к. команда rebase перепис-ет историю коммитов).
    (использовать rebase для кратковрем., локаль. веток, а merge для веток в публич. репоз-и).
git clone rep cloned_rep - клонир-е репоз-я(из родит-й папки)
git remote - узнать имя удал-го репоз.(по-умолч. origin)
git remote show origin - допол-я информ. об удал. репоз.
git branch -a - список всех(и удалённых-на отдалении) веток
  git fetch - извлеч-е(но не примен-е) изм-й из удал-го репоз.
  git merge origin/master - слиян. удалён. и локаль. вет.
git pull - извлеч-е и слиян. удал. и локаль. веток(одной командой как 2 выше)
git branch --track style origin/style - созд-е локаль. ветки, котор. будет отслеж. удал-ю
git clone --bare rep rep.git - созд-е чистого(голого) репоз-я из обычного(толь. файлы git со всеми изм-ми без самих файлов, в котор. эти изм-я).
git remote add shared ../rep - добав. в наш репоз. указ-й.(../rep) в кач-ве удал-го(он буд. получ. изм-я)
git push shared master - отправ. изм-й в удал-й репоз.
Запуск git-сервера(из внеш. директ.):
  git daemon --verbose --export-all --base-path=.
  (Если надо совершить отправку в репоз-й Git Daemon, добавить --enable=receive-pack)
Переход в расшар. катал.(во 2 окне терминала, из внеш.директ.)
  git clone git://localhost/test.git network_test
  cd network_test и ls - просмотр содерж. проекта
Домаш. работа:
  Посмотрите, запущен ли git daemon у вашего соседа. Обменяйтесь IP-адресами и проверьте, сможете ли вы извлекать изменения из репозиториев друг друга.

-----------------------------------------

git init - Инициализация репозитория

git status - Просмотр состояния

git clone [ссылка на удаленный git репозиторий] - Скачивание git репозитория

git commit -m 'сообщение' - Фиксация изменений

git add . - Добавить все

git add -A - Добавить все

git add [файл с расширением] - Добавить конкретный файл

git push origin master - Отправка изменений в ветку master

git pull origin master - Принятие изменений из ветки master

git checkout [git ветка] - Перейти на ветку

git branch - Посмотреть все имеющиеся ветки

git branch [git ветка] - Создать ветку

git merge [git ветка] - Слияние веток

git rm [файл] - Удаление файла

git push origin HEAD - Отправить текущую ветку на удаленный git репозиторий, не вводя ее название

git push -u origin dev - Отправить ветку dev на удаленный git репозиторий. После этой команды локальная ветка dev и удаленная ветка dev будут связаны между собой.

git push origin - Отправить все ветки на удаленный git репозиторий

git branch -d [git ветка] - Удалить ветку (после git merge)

git branch -D [git ветка] - Просто удалить ветку (игнорируя git merge)

git push origin :[git ветка] - Удалить ветку в удаленном git репозитории

git reset --hard d8578edf8458ce06fbc5bb76a58c5ca4a58c5ca4 - Жесткий откат к конкретному коммиту (хэш смотрим в «git log»)

git reset --soft d8578edf8458ce06fbc5bb76a58c5ca4a58c5ca4 - Мягкий откат к конкретному коммиту (хэш смотрим в «git log»)

git remote add origin [ссылка на удаленный git репозиторий] - Подключится к удаленному git репозиторию